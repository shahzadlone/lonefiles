# Shahzad's Bash Exports.

# Helper function to find if a package / program exists or not.
Exists() { which "${1}" &> /dev/null; echo ${?}; }

# -----[ Terminal ]----- {{{
# Set 256 terminal colors
export TERM=tmux-256color;
# ------------------------------ }}}

# -----[ LESS settings. ]----- {{{
# Reduce the screen height according to our set prompt (usefull if prompt spans multiple lines).
# Note: Prompt settings are in: `${HOME}/.bash/.bash_prompt`
# export LESS_LINES="-1";

# -F : Automatically Quit if fits on one screen (like cat-ing).
# -R : Display color control characters.
# -X : Cat mode, i.e. don't clear terminal output upon quit (cat scrolled).
# -J : Display status column.
# -M : Longer / verbose prompt.
# -W : Highlight the first unread line after scrolling window size.
# -i : Case in-sensitive search.
# -z : Reduce the scrolling window size by specified lines (default is 1 screen).
# -x : Set tabs character width.
export LESS="-F -R -X -J -M -W -i -z-3 -x4"

# Old options:
# -S : Chop long lines instead wrapping (can scroll).
# export LESS="-F -R -X -S -J -M -W -i -z-3 -x4"

export LESS_WITH_FLAGS="less ${LESS}";


# -----[ Pager settings. ]----- {{{
#if [ "$(Exists "nvimpager")" -eq 0 ]; then
#    export PAGER="nvimpager -c -p";
#
#elif [ "$(Exists "vimpager")" -eq 0 ]; then
#    export PAGER="vimpager";
#
#else
#    # Use `most` instead of the default, i.e. `less`
#    export PAGER="most";
#fi

export PAGER=${LESS_WITH_FLAGS};

# ------------------------------------------------------------------------ }}}

# -----[ EDITOR/VISUAL (Vim) ]----- {{{
# If I have neovim on my system, then $VISUAL and $EDITOR get overwritten to 'nvim -p'.
export NORMAL_VIM="vim -p";
export VISUAL="vim -p";
export EDITOR="vim -p";
export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\"";


# To help us not recursively open another nvim process inside neovim's :terminal, we
#  overwrite $VISUAL, $EDITOR and $NORMAL_VIM to now open the buffer in a new tab of the
#  parent neovim that is already opened. $NORMAL_VIM is a way for me to use normal vim
#  if I am not inside NeoVim (quite rare).
if [ -n "${NVIM_LISTEN_ADDRESS}" ]; then
    # TODO man man page open in existing buffer
    #if [ -n "${NVIM_LISTEN_ADDRESS+x}" ]; then
    #  export MANPAGER="/usr/local/bin/nvr -c 'Man!' -o -"
    #fi
    # export VISUAL="nvr -cc tabe --remote-wait +'set bufhidden=wipe'"
    # export EDITOR="nvr -cc tabe --remote-wait +'set bufhidden=wipe'"
    # export NORMAL_VIM="nvr -cc tabe --remote-wait +'set bufhidden=wipe'"
    export VISUAL="nvr --remote-tab-wait" 
    export EDITOR="nvr --remote-tab-wait"
    export NORMAL_VIM="nvr --remote-tab-wait"

elif [ "$(Exists "nvim")" -eq 0 ]; then
    export VISUAL="nvim -p";
    export EDITOR="nvim -p";
    export MANPAGER="nvim +Man!";

fi
# ------------------------------ }}}

# -----[ FZF ]----- {{{
# Make fzf use ripgrep by default and also search hidden files, ignoring .git folders.
export FZF_DEFAULT_COMMAND='rg --files --hidden -g "!.git"'
# Use the same default for the ctrl-t command aswell.
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
# Make fzf use fd to search for all folders (hidden and non-hidden).
export FZF_ALT_C_COMMAND="fd --hidden --type=d ."
# --------------------------------- }}

# -----[ Node Version Manager ]----- {{{
export NVM_DIR="${HOME}/.nvm"
[ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"  # This loads nvm
[ -s "${NVM_DIR}/bash_completion" ] && \. "${NVM_DIR}/bash_completion"  # This loads nvm bash_completion
# ---------------------------------- }}}
