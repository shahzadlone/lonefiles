[user]
    email = shahzadlone@gmail.com
    name = Shahzad Lone

[core]
    editor = $VISUAL
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore

[merge]
    tool = vimdiff
    conflictstyle = diff3

[push]
    default = current

[difftool]
    prompt = false

[diff]
    tool = vimdiff
    wsErrorHighlight = all

[color]
  ui = auto

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = blue reverse ul

[color "branch"]
    current = green bold
    local = cyan bold
    remote = yellow bold

[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold


[url "https://gitlab.com/"]
    insteadOf = "gl:"

[url "https://github.com/"]
    insteadOf = "gh:"

[url "git@bitbucket.org:"]
    insteadOf = "bb:"

[url "https://gitlab.com/shahzadlone/"]
    insteadOf = "gls:"

[url "https://github.com/shahzadlone/"]
    insteadOf = "ghs:"

[url "https://bitbucket.com/shahzadlone/"]
    insteadOf = "bbs:"

[pretty]
    custom = "%C(bold yellow)%h%C(bold magenta)%d %C(bold white)%ar %C(bold cyan)%s %C(bold blue)(%an)"
    #                         │                 │                │                │                └─ author name
    #                         │                 │                │                └─ message
    #                         │                 │                └─ date (relative)
    #                         │                 └─ decorations (branch, heads or tags)
    #                         └─ hash (abbreviated)

[alias]
    a = add
    aa = add -A
    ac  = !git add -A && git commit -v
    ap = add -p
    b = branch
    ba = branch --all
    bl = blame
    c = commit -v
    ca = commit --amend
    co = commit --date=\"1 day ago\" -v
    ch = checkout
    chb = checkout -b
    cl = clone
    clb = clone --bare
    cl1 = clone --depth 1
    cp = cherry-pick
    d = diff --color
    ds = diff --color --cached
    drb = push -d origin 
    f = fetch
    fp = fetch --all --prune
    l = log --pretty=custom
    lf = log --first-parent
    lg   = log --graph --pretty=custom  
    ln = log
    lo = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ls = ls-files
    lsf = !git ls-files | egrep -i
    lsr = remote -v
    m = merge
    o = origin
    p = push
    pbo = push branch origin
    po = push origin
    pl = pull
    plo = pull origin
    r = remote
    ra = remote add
    reb = rebase
    res = reset
    rhar = reset --hard
    rl = reflog
    rm = rm -r
    rmc = rm -r --cached
    rmf = rm -r -f
    rmix = reset --mixed
    rmlc = reset --soft HEAD~1
    rr = remote remove
    rrup = remote remove upstream
    rsof = reset --soft
    rurl = remote set-url
    s = status
    sm = submodule
    st = stash
    stl = stash list
    sh = show
    wt = worktree

    # Slightly advance git aliases.

    # Delete remote branch.
    dbr = "!delrbranch() { git push origin --delete \"${1}\"; }; delrbranch"

    # Commit as if ${1} days ago.
    cod = "!oldcommit() { git commit --date=\"\"${1}\" day ago\" -v; }; oldcommit"

    # Add a remote and fetch it.
    addr = "!addremote() { git remote add \"${1}\" \"${2}\" && git fetch \"${1}\"; }; addremote"

    # Add an upstream remote and fetch upstream.
    addup = "!addup() { git remote add upstream \"${1}\" && git fetch upstream; }; addup"

    # Diff with the commit that was back ${1} commit(s).
    dback = "!diffback() { git diff --color HEAD~\"${1}\"; }; diffback"

    # Push current branch to a newly created upstream branch.
    pbr = "!pushb() { git symbolic-ref --short -q HEAD | xargs -I @ git push -u origin @; }; pushb"

    # Show me back that many commit. NOTE: back 1 commit is the latest commit (HEAD~0).
    shb = "!showback() { git show --pretty HEAD~\"${1}\"; }; showback"

    # Reverts to one commit ahead of the specified commit, keeping all the previous
    #  history upto HEAD. Basically, commits one on top of the previous history.
    revhis =  "!keephistory() { git revert --no-commit \"${1}\"..HEAD; }; keephistory"

    # Unadds / Unstages a file or directory.
    unstage =  "!unstage() { git reset HEAD -- \"${1}\"; }; unstage"
    unadd =  "!unadd() { git reset \"${1}\"; }; unadd"

    ; rmlc =  "!keephistory() { git reset --soft HEAD~1; }; keephistory"


# TODO make a command for this:
# git reset --hard <commit-hash>
# git push -f origin <branch>

# To reset to a certain commit branch or tag (discarding all local changes like commits and new files):
# git reset --hard origin/<branch_name>

# Remove last commit.
# rmlc = reset --hard HEAD~1
